<?php
/**
 * @file
 * Implementations of install hooks for the Inmail module.
 */

/**
 * Implements hook_requirements().
 */
function inmail_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {
    $requirements += inmail_get_requirements();
  }

  return $requirements;
}

/**
 * Returns plugin and instance requirements.
 *
 * @return array
 *   An array of plugin and instance requirements.
 */
function inmail_get_requirements() {
  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::entityTypeManager();
  $plugin_types = ['analyzer', 'deliverer', 'handler'];
  $requirements = [];

  foreach ($plugin_types as $plugin_type) {
    // Check instance requirements.
    $entities = $entity_type_manager->getStorage("inmail_$plugin_type")->loadByProperties(['status' => TRUE]);
    /** @var \Drupal\inmail\Entity\PluginConfigEntity $entity */
    foreach ($entities as $entity) {
      // Add requirements specific entity and plugin keys.
      $plugin_id = $entity->getPluginId();
      $entity_key = $plugin_type . '_entity_' . $entity->id();
      $plugin_key = $plugin_type . '_plugin_' . $plugin_id;
      try {
        /** @var \Drupal\inmail\PluginRequirementsInterface $plugin */
        $plugin = $entity->getPluginInstance();

        // Check entity instance requirements.
        $requirements[$entity_key] = $plugin->checkInstanceRequirements();
        // Add title in case requirements are not empty.
        if (!empty($requirements[$entity_key])) {
          $requirements[$entity_key]['title'] = $entity->label() . ' (' . $entity->id() . ')';
        }

        // Check plugin requirements only if it is not already checked.
        if (!isset($requirements[$plugin_key])) {
          $requirements[$plugin_key] = $plugin::checkPluginRequirements();
        }
      }
      catch (\Drupal\Component\Plugin\Exception\PluginException $e) {
        $requirements[$plugin_key] = [
          'title' => t('Missing plugin @id', ['@id' => $plugin_id]),
          'description' => t('Inmail @type plugin @id is missing and cannot be used.', ['@type' => $plugin_type, '@id' => $plugin_id]),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }
  }

  // Filter plugins/instances with no requirements.
  $requirements = array_filter($requirements);

  return $requirements;
}

/**
 * Implements hook_install().
 */
function inmail_install() {
  // Register the special mail plugin used with ModeratorForwardHandler.
  $config_data['interface']['inmail_handler_moderator_forward'] = 'inmail_direct';
  \Drupal::configFactory()->getEditable('system.mail')->merge($config_data)->save();
}
