<?php
/**
 * @file
 * Main procedural code file for the Inmail module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\inmail\Entity\AnalyzerConfig;

/**
 * @mainpage
 * This documentation is generated from comments embedded in the source code of
 * the Imail project. It is targeted for developers who want to understand how
 * the module works in order to fix a bug, add a feature or integrate with the
 * module through the API.
 *
 * You can read more under the following chapters:
 *   - @link processing The general message processing flow @endlink
 *   - @link analyzer Analysis of new messages @endlink
 *   - @link handler Handling analyzed messages @endlink
 *   - @link mailmute Integration with the Mailmute module @enlink
 *
 * In short, these are the interesting interfaces when integrating with Inmail:
 *   - To process email, get the service inmail.processor, which implements
 *     \Drupal\inmail\MessageProcessorInterface including ::process().
 *   - To extend Inmail with analyzers or handlers, you need to implement
 *     \Drupal\inmail\MessageAnalyzer\MessageAnalyzerInterface as a service, or
 *     \Drupal\inmail\Plugin\inmail\Handler\HandlerInterface as a plugin.
 *
 * @section bounce Bounce messages
 * When a mail server is unable to deliver a message, it typically creates and
 * sends a "bounce message" back to the sender, informing about the failure.
 * Bounce messages are standardized in
 * @link http://tools.ietf.org/html/rfc3464 RFC 3464 "An Extensible Message Format for Delivery Status Notifications" @endlink
 * as Delivery Status Notifications (DSN). Some servers do however send bounce
 * messages that do not adhere to the standards.
 *
 * Bounces are the central type of message that this project is concerned with.
 * Some bounce-oriented analyzers are provided by default. During the first
 * phases of this project, bounce message handling is the definite focus of
 * attention. Further releases are however planned to include handling of manual
 * replies on messages previously sent from the website, and even new messages
 * sent directly to the website.
 */

/**
 * @defgroup processing Message processing
 * @{
 * Email messages to the website is processed by the inmail.processor service,
 * which serves to perform various actions depending on the content of the
 * message.
 *
 * First the plain-text message is parsed into a \Drupal\inmail\Message object,
 * which is then passed through a series of analyzers, along with a
 * \Drupal\inmail\MessageAnalyzer\Result\AnalyzerResult object. Each analyzer
 * evaluates some aspect of the message and possibly adds collected information
 * to the result. Finally the message and the result are sent through a series
 * of handlers, in order for them to perform useful actions based on the
 * analysis results.
 * @}
 */

/**
 * @defgroup analyzer Analyzers
 * @{
 * Analyzers evaluate messages to deduce specific information that can be used
 * by handlers.
 *
 * The analyzer services are called by priority in descending order. The order
 * is important because the result object passed between them is only writable
 * once per property. For example, if two analyzers report different
 * @link bounce DSN status codes @endlink, only the one with the higher priority
 * may set the status code property on the result.
 * An analyzer that produces frequent but unreliable results should be given a
 * low priority, to let it be used only as a "last resort". On the other side of
 * the scale is \Drupal\inmail\MessageAnalyzer\DSNStatusAnalyzer, which only
 * reports results that are deducible according to standard RFCs, and therefore
 * highly reliable.
 *
 * Adding your own analyzer is a matter of implementing
 * \Drupal\inmail\MessageAnalyzer\MessageAnalyzerInterface and adding a service
 * record for the class.
 * @}
 */

/**
 * @defgroup handler Handlers
 * @{
 * Handlers provide callbacks that are executed after each message has been
 * analyzed.
 *
 * Handlers are added by creating a subclass of
 * \Drupal\inmail\Plugin\inmail\Handler\HandlerBase in the matching plugin
 * namespace. To make it configurable, make sure to override the
 * \Drupal\Component\Plugin\ConfigurablePluginInterface methods and define the
 * schema for it in yourmodule.schema.yml. See inmail_mailmute for an example.
 * @}
 */

/**
 * @defgroup mailmute Mailmute integration
 * @{
 * The Mailmute message handler
 *
 * The optional submodule inmail_mailmute provides integration with the Mailmute
 * module (http://drupal.org/project/mailmute). The purpose is to avoid keeping
 * sending messages to email addresses if prior delivery failed. Typical reasons
 * for delivery failure include abandoned email accounts, full inboxes and
 * misspelled or misentered addresses.
 *
 * For hard bounces (e.g. due to a misspelled and non-existent address), the
 * state of the recipient address is set to "Invalid address". A soft bounce
 * (e.g. due to a full inbox) triggers a transition to the "Counting soft
 * bounces" state, and after a configurable number of subsequent soft bounces,
 * the state is set to "Temporarily unreachable".
 *
 * Whether a bounce is considered soft or hard depends on the status code that
 * an Analyzer assigned to the message. A 4.X.X code indicates a soft bounce,
 * and a 5.X.X code indicates a hard bounce.
 *
 * If the message is not identified as a bounce, or if it is a bounce but the
 * state of the intended recipient is currently "Persistent send", nothing
 * happens. If it is a bounce but the address can not be extracted
 * automatically, it may be forwarded to an administrator for manual handling.
 * @}
 */

/**
 * Implements hook_help().
 */
function inmail_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Display handler information on handler configuration forms.
    case 'entity.inmail_handler.edit_form':
      $handler_config = $route_match->getParameter('inmail_handler');
      /** @var \Drupal\inmail\Plugin\inmail\Handler\HandlerInterface $handler */
      $handler = \Drupal::service('plugin.manager.inmail.handler')->createInstance($handler_config->getPluginId());
      $help = $handler->help();
      return drupal_render($help);

  }
}

/**
 * Implements hook_mail_alter().
 */
function inmail_mail_alter(&$message) {
  // Set to custom Return-Path if configured.
  if ($return_path = \Drupal::config('inmail.settings')->get('return_path')) {
    $message['headers']['Return-Path'] = $return_path;
  }

  // Manipulate the Return-Path.
  if (AnalyzerConfig::load('verp')->status()) {
    inmail_mail_alter_VERP($message);
  }
}

/**
 * Modifies the Return-Path value to include the recipient's address.
 *
 * The technique is called Variable Envelope Return Path (VERP) and enables easy
 * identification of the intended recipient for incoming bounce messages. That
 * identification happens in VERPAnalyzer.
 *
 * @see \Drupal\inmail\MessageAnalyzer\VERPAnalyzer
 * @see inmail_generate_VERP()
 */
function inmail_mail_alter_VERP(&$message) {
  // Identify current Return-Path value.
  $return_path = $message['headers']['Return-Path'];

  // Include recipient address in Return-Path value.
  // @todo Handle multiple recipients and "Foo <a@b.c>" format: https://www.drupal.org/node/2379801
  if ($return_path) {
    $message['headers']['Return-Path'] = inmail_generate_VERP($return_path, $message['to']);
  }
}

/**
 * Generates a VERP Return-Path address.
 *
 * @param string $return_path
 *   The original Return-Path address.
 * @param string $recipient
 *   The address of the recipient.
 *
 * @return string
 *   The modified Return-Path address.
 *
 * @see \Drupal\inmail\MessageAnalyzer\VERPAnalyzer
 */
function inmail_generate_VERP($return_path, $recipient) {
  $to = str_replace('@', '=', $recipient);
  return str_replace('@', "+$to@", $return_path);
}

/**
 * Implements hook_mail().
 */
function inmail_mail($key, &$message, $params) {
  switch ($key) {
    // Forwards unclassified bounces through ModeratorForwardHandler.
    case 'handler_moderator_forward':
      /** @var \Drupal\inmail\Message $original */
      $original = $params['original'];

      // Set subject.
      $message['subject'] = $original->getHeader('Subject');

      // Set body.
      $message['body'][] = $original->getBody();

      // Set headers, with custom X header prepended.
      // Alter hooks expect headers to be in name => value format. Such a
      // structure cannot handle duplicate header names, as is common with e.g.
      // the Received header and therefore a requirement in the context of
      // forwarding. Thus the headers are assigned to $message['raw_headers']
      // here, and the same is expected by DirectMail.
      $headers = preg_replace('/\nTo: [^\n]*/', '', implode("\n", $original->getHeaders()));
      $headers = "X-Inmail-Forwarded: handler_moderator_forward\n" . $headers;
      // @todo Handle multiple recipients wherever address is parsed https://www.drupal.org/node/2379801
      //   In case some of the multiple recipients are suppressed, add header
      //   so the remaining recipients can see this in the headers.
      $message['raw_headers'] = $headers;
      break;
  }
}
